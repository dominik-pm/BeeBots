import { OrderTrigger } from "../phemexclient/phemex-api-client"
import { fillStatus, orderSide, orderType } from "./phemexhandler"

declare module 'phemexapi'

export declare type PhemexRequestOptions = {
    isLivenet: boolean,
    apiKey: string,
    secret: string
}

export declare type PhemexMarketData = {
    symbol: string,
    indexPrice: number,
    markPrice: number,
    close: number,
    high: number,
    low: number,
    open: number,
    fundingRate: number,
    predFundingRate: number,
    openInterest: 0,
    turnover: number,
    volume: number
    timestamp: number,
}
// export declare type MarketData = {
//     close: 499180000,
//     fundingRate: 10000,
//     high: 511625000,
//     indexPrice: 499301405,
//     low: 497005000,
//     markPrice: 499303273,
//     open: 508695000,
//     openInterest: 0,
//     predFundingRate: 10000,
//     symbol: "BTCUSD",
//     timestamp: 1640504522794840800,
//     turnover: 16795485860778,
//     volume: 8490905048
//     currentPrice: 49914.5
// }
export declare type PhemexAccountInfo = {
    account: {
        userID: number,
        accountId: number,
        currency: string,
        accountBalanceEv: number,
        totalUsedBalanceEv: number,
        bonusBalanceEv: number
    },
    positions: PhemexAccountPosition[]
}
export declare type PhemexAccountPosition = {
    userID: number,
    accountID: number,
    symbol: string,
    currency: string,
    side: orderSide,
    positionStatus: Normal,
    crossMargin: false,
    leverageEr: number,
    leverage: number,
    initMarginReqEr: number,
    initMarginReq: number,
    maintMarginReqEr: number,
    maintMarginReq: number,
    riskLimitEv: number,
    riskLimit: number,
    size: number,
    value: number,
    valueEv: number,
    avgEntryPriceEp: number,
    avgEntryPrice: number,
    posCostEv: number,
    posCost: number,
    assignedPosBalanceEv: number,
    assignedPosBalance: number,
    bankruptCommEv: number,
    bankruptComm: number,
    bankruptPriceEp: number,
    bankruptPrice: number,
    positionMarginEv: number,
    positionMargin: number,
    liquidationPriceEp: number,
    liquidationPrice: number,
    deleveragePercentileEr: number,
    deleveragePercentile: number,
    buyValueToCostEr: number,
    buyValueToCost: number,
    sellValueToCostEr: number,
    sellValueToCost: number,
    markPriceEp: number,
    markPrice: number,
    markValueEv: number,
    markValue: null,
    unRealisedPosLossEv: number,
    unRealisedPosLoss: null,
    estimatedOrdLossEv: number,
    estimatedOrdLoss: number,
    usedBalanceEv: number,
    usedBalance: number,
    takeProfitEp: number,
    takeProfit: null,
    stopLossEp: number,
    stopLoss: null,
    cumClosedPnlEv: number,
    cumFundingFeeEv: number,
    cumTransactFeeEv: number,
    realisedPnlEv: number,
    realisedPnl: null | number,
    cumRealisedPnlEv: number,
    cumRealisedPnl: null | number,
    transactTimeNs: number,
    takerFeeRateEr: number,
    makerFeeRateEr: number,
    term: number,
    lastTermEndTimeNs: number,
    lastFundingTimeNs: number,
    curTermRealisedPnlEv: number,
    execSeq: number
}
export declare type PhemexOpenOrder = {
    bizError: number,
    orderID: string,
    clOrdID: string,
    symbol: string,
    side: orderSide,
    actionTimeNs: number,
    transactTimeNs: number,
    orderType: orderType,
    priceEp: number,
    price: number,
    orderQty: number,
    displayQty: number,
    timeInForce: string,
    reduceOnly: false,
    closedPnlEv: number,
    closedPnl: number,
    closedSize: number,
    cumQty: number,
    cumValueEv: number,
    cumValue: number,
    leavesQty: number,
    leavesValueEv: number,
    leavesValue: number,
    stopDirection: string,
    stopPxEp: number,
    stopPx: number,
    trigger: string,
    pegOffsetValueEp: number,
    execStatus: string,
    pegPriceType: string,
    ordStatus: string
}
export declare type PhemexClosedTrade = {
    orderID: string,
    clOrdID: string,
    symbol: string,
    side: orderSide,
    orderType: orderType,
    actionTimeNs: 1640425651318545700,
    priceEp: 530765000,
    price: null,
    orderQty: 500,
    displayQty: 0,
    timeInForce: string,
    reduceOnly: false,
    takeProfitEp: 0,
    takeProfit: null,
    stopLossEp: 0,
    closedPnlEv: 212,
    closedPnl: null,
    closedSize: 500,
    cumQty: 500,
    cumValueEv: 981913,
    cumValue: null,
    leavesQty: 0,
    leavesValueEv: 0,
    leavesValue: null,
    stopLoss: null,
    stopDirection: string,
    ordStatus: orderStatus,
    transactTimeNs: 1640425651321616100,
    bizError: 0
}
export declare type PhemexUserTrade = {
    transactTimeNs: number,
    symbol: string,
    currency: string,
    action: string,
    side: orderSide,
    tradeType: string,
    execQty: number,
    execPriceEp: number,
    orderQty: number,
    priceEp: number,
    execValueEv: number,
    feeRateEr: number,   
    execFeeEv: number,     // without entry fee
    closedSize: number,
    closedPnlEv: number, // without fee
    ordType: orderType,
    execID: string,
    orderID: string,
    clOrdID: string,
    execStatus: fillStatus
}

export declare type PhemexOrderCreatedResponse = {
    bizError: 0,
    orderID: string,
    clOrdID: string,
    symbol: string,
    side: orderSide,
    actionTimeNs: 1640352721748348400,
    transactTimeNs: 0,
    orderType: orderType,
    priceEp: 513000000,
    price: 51300,
    orderQty: 500,
    displayQty: 0,
    timeInForce: string, // GoodTillCancel, ...
    reduceOnly: false,
    closedPnlEv: 0,
    closedPnl: 0,
    closedSize: 0,
    cumQty: 0,
    cumValueEv: 0,
    cumValue: 0,
    leavesQty: 500,
    leavesValueEv: 974658,
    leavesValue: 0.00974658,
    stopDirection: string,
    stopPxEp: 0,
    stopPx: 0,
    trigger: OrderTrigger,
    pegOffsetValueEp: 0,
    execStatus: string,
    pegPriceType: string,
    ordStatus: string
}